/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.workflow.model;

import java.util.Objects;
import com.finbourne.workflow.model.TimeOfDay;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.workflow.JSON;

/**
 * Time constraints for a Recurrence Pattern
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TimeConstraints {
  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_TIMES_OF_DAY = "timesOfDay";
  @SerializedName(SERIALIZED_NAME_TIMES_OF_DAY)
  private List<TimeOfDay> timesOfDay = new ArrayList<>();

  public TimeConstraints() {
  }

  public TimeConstraints startDate(String startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of the Recurrence Pattern
   * @return startDate
  **/
  @jakarta.annotation.Nonnull
  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public TimeConstraints endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Optional end date of the Recurrence Pattern
   * @return endDate
  **/
  @jakarta.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }


  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public TimeConstraints timesOfDay(List<TimeOfDay> timesOfDay) {
    
    this.timesOfDay = timesOfDay;
    return this;
  }

  public TimeConstraints addTimesOfDayItem(TimeOfDay timesOfDayItem) {
    if (this.timesOfDay == null) {
      this.timesOfDay = new ArrayList<>();
    }
    this.timesOfDay.add(timesOfDayItem);
    return this;
  }

   /**
   * Times of the day to run the Recurrence Pattern
   * @return timesOfDay
  **/
  @jakarta.annotation.Nonnull
  public List<TimeOfDay> getTimesOfDay() {
    return timesOfDay;
  }


  public void setTimesOfDay(List<TimeOfDay> timesOfDay) {
    this.timesOfDay = timesOfDay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeConstraints timeConstraints = (TimeConstraints) o;
    return Objects.equals(this.startDate, timeConstraints.startDate) &&
        Objects.equals(this.endDate, timeConstraints.endDate) &&
        Objects.equals(this.timesOfDay, timeConstraints.timesOfDay);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDate, endDate, timesOfDay);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeConstraints {\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    timesOfDay: ").append(toIndentedString(timesOfDay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("timesOfDay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("startDate");
    openapiRequiredFields.add("timesOfDay");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TimeConstraints
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TimeConstraints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeConstraints is not found in the empty JSON string", TimeConstraints.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TimeConstraints.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("timesOfDay").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `timesOfDay` to be an array in the JSON string but got `%s`", jsonObj.get("timesOfDay").toString()));
      }

      JsonArray jsonArraytimesOfDay = jsonObj.getAsJsonArray("timesOfDay");
      // validate the required field `timesOfDay` (array)
      for (int i = 0; i < jsonArraytimesOfDay.size(); i++) {
        TimeOfDay.validateJsonElement(jsonArraytimesOfDay.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeConstraints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeConstraints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeConstraints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeConstraints.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeConstraints>() {
           @Override
           public void write(JsonWriter out, TimeConstraints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeConstraints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeConstraints given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeConstraints
  * @throws IOException if the JSON string is invalid with respect to TimeConstraints
  */
  public static TimeConstraints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeConstraints.class);
  }

 /**
  * Convert an instance of TimeConstraints to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
