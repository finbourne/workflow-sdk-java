/*
 * FINBOURNE Workflow API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.workflow.model;

import java.util.Objects;
import com.finbourne.workflow.model.EventHandlerMapping;
import com.finbourne.workflow.model.EventMatchingPattern;
import com.finbourne.workflow.model.ResourceId;
import com.finbourne.workflow.model.ScheduleMatchingPattern;
import com.finbourne.workflow.model.TaskActivityResponse;
import com.finbourne.workflow.model.VersionInfo;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.workflow.JSON;

/**
 * Information about an Event Handler
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventHandler {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private ResourceId id;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private VersionInfo version;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_EVENT_MATCHING_PATTERN = "eventMatchingPattern";
  @SerializedName(SERIALIZED_NAME_EVENT_MATCHING_PATTERN)
  private EventMatchingPattern eventMatchingPattern;

  public static final String SERIALIZED_NAME_SCHEDULE_MATCHING_PATTERN = "scheduleMatchingPattern";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_MATCHING_PATTERN)
  private ScheduleMatchingPattern scheduleMatchingPattern;

  public static final String SERIALIZED_NAME_RUN_AS_USER_ID = "runAsUserId";
  @SerializedName(SERIALIZED_NAME_RUN_AS_USER_ID)
  private EventHandlerMapping runAsUserId;

  public static final String SERIALIZED_NAME_TASK_DEFINITION_ID = "taskDefinitionId";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION_ID)
  private ResourceId taskDefinitionId;

  public static final String SERIALIZED_NAME_TASK_DEFINITION_AS_AT = "taskDefinitionAsAt";
  @SerializedName(SERIALIZED_NAME_TASK_DEFINITION_AS_AT)
  private OffsetDateTime taskDefinitionAsAt;

  public static final String SERIALIZED_NAME_TASK_ACTIVITY = "taskActivity";
  @SerializedName(SERIALIZED_NAME_TASK_ACTIVITY)
  private TaskActivityResponse taskActivity;

  public EventHandler() {
  }

  public EventHandler id(ResourceId id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getId() {
    return id;
  }


  public void setId(ResourceId id) {
    this.id = id;
  }


  public EventHandler version(VersionInfo version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @jakarta.annotation.Nullable
  public VersionInfo getVersion() {
    return version;
  }


  public void setVersion(VersionInfo version) {
    this.version = version;
  }


  public EventHandler displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Human readable name
   * @return displayName
  **/
  @jakarta.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EventHandler description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Human readable description
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public EventHandler status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the event handler
   * @return status
  **/
  @jakarta.annotation.Nonnull
  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public EventHandler eventMatchingPattern(EventMatchingPattern eventMatchingPattern) {
    
    this.eventMatchingPattern = eventMatchingPattern;
    return this;
  }

   /**
   * Get eventMatchingPattern
   * @return eventMatchingPattern
  **/
  @jakarta.annotation.Nullable
  public EventMatchingPattern getEventMatchingPattern() {
    return eventMatchingPattern;
  }


  public void setEventMatchingPattern(EventMatchingPattern eventMatchingPattern) {
    this.eventMatchingPattern = eventMatchingPattern;
  }


  public EventHandler scheduleMatchingPattern(ScheduleMatchingPattern scheduleMatchingPattern) {
    
    this.scheduleMatchingPattern = scheduleMatchingPattern;
    return this;
  }

   /**
   * Get scheduleMatchingPattern
   * @return scheduleMatchingPattern
  **/
  @jakarta.annotation.Nullable
  public ScheduleMatchingPattern getScheduleMatchingPattern() {
    return scheduleMatchingPattern;
  }


  public void setScheduleMatchingPattern(ScheduleMatchingPattern scheduleMatchingPattern) {
    this.scheduleMatchingPattern = scheduleMatchingPattern;
  }


  public EventHandler runAsUserId(EventHandlerMapping runAsUserId) {
    
    this.runAsUserId = runAsUserId;
    return this;
  }

   /**
   * Get runAsUserId
   * @return runAsUserId
  **/
  @jakarta.annotation.Nonnull
  public EventHandlerMapping getRunAsUserId() {
    return runAsUserId;
  }


  public void setRunAsUserId(EventHandlerMapping runAsUserId) {
    this.runAsUserId = runAsUserId;
  }


  public EventHandler taskDefinitionId(ResourceId taskDefinitionId) {
    
    this.taskDefinitionId = taskDefinitionId;
    return this;
  }

   /**
   * Get taskDefinitionId
   * @return taskDefinitionId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getTaskDefinitionId() {
    return taskDefinitionId;
  }


  public void setTaskDefinitionId(ResourceId taskDefinitionId) {
    this.taskDefinitionId = taskDefinitionId;
  }


  public EventHandler taskDefinitionAsAt(OffsetDateTime taskDefinitionAsAt) {
    
    this.taskDefinitionAsAt = taskDefinitionAsAt;
    return this;
  }

   /**
   * AsAt of the required task definition
   * @return taskDefinitionAsAt
  **/
  @jakarta.annotation.Nullable
  public OffsetDateTime getTaskDefinitionAsAt() {
    return taskDefinitionAsAt;
  }


  public void setTaskDefinitionAsAt(OffsetDateTime taskDefinitionAsAt) {
    this.taskDefinitionAsAt = taskDefinitionAsAt;
  }


  public EventHandler taskActivity(TaskActivityResponse taskActivity) {
    
    this.taskActivity = taskActivity;
    return this;
  }

   /**
   * Get taskActivity
   * @return taskActivity
  **/
  @jakarta.annotation.Nonnull
  public TaskActivityResponse getTaskActivity() {
    return taskActivity;
  }


  public void setTaskActivity(TaskActivityResponse taskActivity) {
    this.taskActivity = taskActivity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventHandler eventHandler = (EventHandler) o;
    return Objects.equals(this.id, eventHandler.id) &&
        Objects.equals(this.version, eventHandler.version) &&
        Objects.equals(this.displayName, eventHandler.displayName) &&
        Objects.equals(this.description, eventHandler.description) &&
        Objects.equals(this.status, eventHandler.status) &&
        Objects.equals(this.eventMatchingPattern, eventHandler.eventMatchingPattern) &&
        Objects.equals(this.scheduleMatchingPattern, eventHandler.scheduleMatchingPattern) &&
        Objects.equals(this.runAsUserId, eventHandler.runAsUserId) &&
        Objects.equals(this.taskDefinitionId, eventHandler.taskDefinitionId) &&
        Objects.equals(this.taskDefinitionAsAt, eventHandler.taskDefinitionAsAt) &&
        Objects.equals(this.taskActivity, eventHandler.taskActivity);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, version, displayName, description, status, eventMatchingPattern, scheduleMatchingPattern, runAsUserId, taskDefinitionId, taskDefinitionAsAt, taskActivity);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventHandler {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    eventMatchingPattern: ").append(toIndentedString(eventMatchingPattern)).append("\n");
    sb.append("    scheduleMatchingPattern: ").append(toIndentedString(scheduleMatchingPattern)).append("\n");
    sb.append("    runAsUserId: ").append(toIndentedString(runAsUserId)).append("\n");
    sb.append("    taskDefinitionId: ").append(toIndentedString(taskDefinitionId)).append("\n");
    sb.append("    taskDefinitionAsAt: ").append(toIndentedString(taskDefinitionAsAt)).append("\n");
    sb.append("    taskActivity: ").append(toIndentedString(taskActivity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("version");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("status");
    openapiFields.add("eventMatchingPattern");
    openapiFields.add("scheduleMatchingPattern");
    openapiFields.add("runAsUserId");
    openapiFields.add("taskDefinitionId");
    openapiFields.add("taskDefinitionAsAt");
    openapiFields.add("taskActivity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("runAsUserId");
    openapiRequiredFields.add("taskDefinitionId");
    openapiRequiredFields.add("taskActivity");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventHandler
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventHandler.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventHandler is not found in the empty JSON string", EventHandler.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventHandler.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `id`
      ResourceId.validateJsonElement(jsonObj.get("id"));
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        VersionInfo.validateJsonElement(jsonObj.get("version"));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `eventMatchingPattern`
      if (jsonObj.get("eventMatchingPattern") != null && !jsonObj.get("eventMatchingPattern").isJsonNull()) {
        EventMatchingPattern.validateJsonElement(jsonObj.get("eventMatchingPattern"));
      }
      // validate the optional field `scheduleMatchingPattern`
      if (jsonObj.get("scheduleMatchingPattern") != null && !jsonObj.get("scheduleMatchingPattern").isJsonNull()) {
        ScheduleMatchingPattern.validateJsonElement(jsonObj.get("scheduleMatchingPattern"));
      }
      // validate the required field `runAsUserId`
      EventHandlerMapping.validateJsonElement(jsonObj.get("runAsUserId"));
      // validate the required field `taskDefinitionId`
      ResourceId.validateJsonElement(jsonObj.get("taskDefinitionId"));
      // validate the required field `taskActivity`
      TaskActivityResponse.validateJsonElement(jsonObj.get("taskActivity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventHandler.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventHandler' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventHandler> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventHandler.class));

       return (TypeAdapter<T>) new TypeAdapter<EventHandler>() {
           @Override
           public void write(JsonWriter out, EventHandler value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventHandler read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventHandler given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventHandler
  * @throws IOException if the JSON string is invalid with respect to EventHandler
  */
  public static EventHandler fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventHandler.class);
  }

 /**
  * Convert an instance of EventHandler to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
